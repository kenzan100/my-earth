#!/usr/bin/env ruby

require 'dry/cli'
require 'faraday'
require 'dotenv'

Dotenv.load

URL_HOST = ENV['HOST_URL'] || 'http://localhost:9292/'

class WithEnvLoader < Dry::CLI::Command
  FakeBody = Struct.new(:body)

  def initialize(**)
    super
    @client = ->(path, params) {
      begin
        Faraday.get(URL_HOST + path, params, { 'MY_JOB_GAME_ID' => ENV['GAME_ID'] })
      rescue Faraday::ConnectionFailed
        FakeBody.new "HOST_URL not set in environment variables."
      end
    }
  end
end

class RewriteGameID < Dry::CLI::Command
  desc "Rewrite game id"

  argument :game_id, required: true, desc: "Game ID obtained from init command."

  def call(game_id:, **)
    file_path = './.env'
    unless File.exists?(file_path)
      puts ".env file not found. make sure you're in correct directory."
    end

    already_set = false
    val = ''
    File.readlines(file_path).each do |line|
      if line.start_with?("GAME_ID=")
        val << "GAME_ID=#{game_id}"
        already_set = true
      else
        val << line
      end
    end

    unless already_set
      val << "GAME_ID=#{game_id}"
    end

    File.open(file_path, 'w') do |f|
      f.puts val
    end

    puts "Wrote the new GAME_ID to .env file."
  end
end

module MyEarth
  module MyJob
    module Commands
      extend Dry::CLI::Registry

      class Action < WithEnvLoader
        desc "List of one-off actions"

        argument :target, required: true, desc: "The name of goods for action. list to see the available goods."
        argument :action, desc: "The name of action you wanna perform on."

        def call(target:, action: nil, **)
          if target == 'list'
            puts "List of available actions.."
            puts
            res = @client.call("list", { text: true })
            puts res.body
          elsif target && action
            puts "trying to #{action} #{target}.."

            res = @client.call("action", { target: target, action: action })
            puts res.body
          else
            puts "Usage: \"me action TARGET ACTION\""
          end
        end
      end

      class Schedule < WithEnvLoader
        desc "Schedule your day"

        argument :allocatable
        argument :action
        argument :start_time
        argument :end_time

        def call(allocatable: nil, action: nil, start_time: nil, end_time: nil, **)
          if [allocatable, action, start_time, end_time].none?
            puts 'reading your current schedule..'

            res = @client.call("schedule", {})
            puts res.body

            return
          end

          if allocatable && action && start_time && end_time
            puts "Scheduling #{action} #{allocatable} from #{start_time} till #{end_time}..."

            res = @client.call(
              "schedule",
              {
                target: allocatable,
                scheduled_action: action,
                scheduled_time_from: start_time,
                scheduled_time_till: end_time
              }
            )
            puts res.body

          else
            puts "Usage: \"me schedule ALLOCATABLE ACTION START_TIME END_TIME\""
          end
        end
      end

      class Status < WithEnvLoader
        desc "See current stats"

        def call(input: nil, **)
          puts "reading latest stats.."

          res = @client.call("stats", {})
          puts res.body
        end
      end

      class Logs < WithEnvLoader
        argument :since

        def call(since: nil, **)
          res = @client.call("logs", { since: since })
          puts res.body
        end
      end

      class ChangeSpeed < WithEnvLoader
        argument :val

        def call(val: nil, **)
          res = @client.call("change_speed", { speed: val })
          puts res.body
        end
      end

      class Init < WithEnvLoader
        def call
          res = @client.call("init", {})
          puts res.body
        end
      end

      class Destroy < WithEnvLoader
        desc "destroy the game set in .env right now."
        def call
          puts "Destroying #{ENV['GAME_ID']}. Are you sure? (Y/n)"
          input = STDIN.gets
          unless input.upcase.start_with? 'Y'
            puts 'abort.'
            return
          end

          puts @client.call("destroy", {}).body
        end
      end

      class Games < WithEnvLoader
        desc "see list of running game ids."
        def call
          puts "reading a list of running games.."
          puts @client.call("games", {}).body
        end
      end

      constants.each do |const|
        register const.downcase.to_s, const_get(const)
      end
    end
  end
end

MyEarth::MyJob::Commands.register 'set', RewriteGameID

Dry::CLI.new(MyEarth::MyJob::Commands).call